#!/usr/bin/env python3
# this file is auto-generated by gen_from_wiki.py
from __future__ import annotations
from typing import Optional, Tuple
import enum
import functools

from ..item import EquipmentItem
from ..stats import Stats
from .equipment_slot import EquipmentSlot
from .player_class import PlayerClass


def find_equipment(name: str) -> EquipmentItem:
    name = name.replace("'", "\'").title().replace(' ', '')
    try: return OffHandEquipment[name]
    except KeyError: pass
    try: return MainHandEquipment[name]
    except KeyError: pass
    try: return HeadEquipment[name]
    except KeyError: pass
    try: return BodyEquipment[name]
    except KeyError: pass
    raise ValueError(f'invalid equipment: {name}')


class OffHandEquipment(EquipmentItem, enum.Enum):

    @staticmethod
    @functools.cache
    def by_class(cls: PlayerClass) -> Tuple[OffHandEquipment, ...]:
        return tuple(
            c for c in OffHandEquipment
            if cls in c.value.classes
        )

    BoneBracelet = (
        'Bone Bracelet',
        True,  # tradable
        212,  # sell value
        (PlayerClass.Wizard, PlayerClass.Cleric),
        Stats.from_sequence([0, 0, 1, 1, 1, 1, 1, 1]),
        EquipmentSlot.OffHand,
    )
    NimbleBracelet = (
        'Nimble Bracelet',
        False,  # tradable
        3,  # sell value
        (PlayerClass.Wizard, PlayerClass.Cleric),
        Stats.from_sequence([0, 0, 0, 0, 1, 0, 0, 0]),
        EquipmentSlot.OffHand,
    )
    SimpleBracelet = (
        'Simple Bracelet',
        True,  # tradable
        1,  # sell value
        (PlayerClass.Wizard, PlayerClass.Cleric),
        Stats.from_sequence([0, 0, 0, 1, 0, 0, 1, 0]),
        EquipmentSlot.OffHand,
    )
    StuddedShield = (
        'Studded Shield',
        False,  # tradable
        51,  # sell value
        (PlayerClass.Warrior),
        Stats.from_sequence([0, 0, 0, 3, 0, 0, 1, 0]),
        EquipmentSlot.OffHand,
    )
    WoodenShield = (
        'Wooden Shield',
        True,  # tradable
        1,  # sell value
        (PlayerClass.Warrior),
        Stats.from_sequence([0, 0, 0, 2, 0, 0, 0, 0]),
        EquipmentSlot.OffHand,
    )
class MainHandEquipment(EquipmentItem, enum.Enum):

    @staticmethod
    @functools.cache
    def by_class(cls: PlayerClass) -> Tuple[MainHandEquipment, ...]:
        return tuple(
            c for c in MainHandEquipment
            if cls in c.value.classes
        )

    CrookedWand = (
        'Crooked Wand',
        False,  # tradable
        78,  # sell value
        (PlayerClass.Wizard, PlayerClass.Cleric),
        Stats.from_sequence([0, 0, 1, 0, 0, 5, 0, 0]),
        EquipmentSlot.MainHand,
    )
    CypressStick = (
        'Cypress Stick',
        True,  # tradable
        1,  # sell value
        (PlayerClass.Cleric, PlayerClass.Warrior, PlayerClass.Wizard),
        Stats.from_sequence([0, 0, 1, 0, 0, 0, 0, 0]),
        EquipmentSlot.MainHand,
    )
    DimitrisScythe = (
        'Dimitri\'s Scythe',
        True,  # tradable
        367,  # sell value
        (PlayerClass.Warrior),
        Stats.from_sequence([0, 0, 8, 0, 0, 0, 0, 0]),
        EquipmentSlot.MainHand,
    )
    DimitrisTooth = (
        'Dimitri\'s Tooth',
        True,  # tradable
        121,  # sell value
        (PlayerClass.Cleric),
        Stats.from_sequence([0, 0, 3, 0, 1, 0, 0, 1]),
        EquipmentSlot.MainHand,
    )
    OakenClub = (
        'Oaken Club',
        True,  # tradable
        2,  # sell value
        (PlayerClass.Warrior, PlayerClass.Cleric),
        Stats.from_sequence([0, 0, 2, 0, 0, 0, 0, 0]),
        EquipmentSlot.MainHand,
    )
    RustyDagger = (
        'Rusty Dagger',
        True,  # tradable
        121,  # sell value
        (PlayerClass.Cleric),
        Stats.from_sequence([0, 0, 3, 0, 1, 0, 0, 1]),
        EquipmentSlot.MainHand,
    )
    TheTenderizer = (
        'The Tenderizer',
        True,  # tradable
        367,  # sell value
        (PlayerClass.Warrior),
        Stats.from_sequence([0, 0, 8, 0, 0, 0, 0, 0]),
        EquipmentSlot.MainHand,
    )
    TrainingSword = (
        'Training Sword',
        True,  # tradable
        45,  # sell value
        (PlayerClass.Warrior),
        Stats.from_sequence([0, 0, 5, 0, 0, 0, 0, 0]),
        EquipmentSlot.MainHand,
    )
    TrainingWand = (
        'Training Wand',
        True,  # tradable
        52,  # sell value
        (PlayerClass.Wizard, PlayerClass.Cleric),
        Stats.from_sequence([0, 0, 1, 0, 0, 3, 0, 0]),
        EquipmentSlot.MainHand,
    )
    WishboneWand = (
        'Wishbone Wand',
        True,  # tradable
        1,  # sell value
        (PlayerClass.Wizard, PlayerClass.Cleric),
        Stats.from_sequence([0, 0, 1, 0, 0, 5, 0, 0]),
        EquipmentSlot.MainHand,
    )
class HeadEquipment(EquipmentItem, enum.Enum):

    @staticmethod
    @functools.cache
    def by_class(cls: PlayerClass) -> Tuple[HeadEquipment, ...]:
        return tuple(
            c for c in HeadEquipment
            if cls in c.value.classes
        )

    DentedHelm = (
        'Dented Helm',
        True,  # tradable
        147,  # sell value
        (PlayerClass.Warrior),
        Stats.from_sequence([0, 0, 0, 3, 0, 0, 0, 0]),
        EquipmentSlot.Head,
    )
    JaggedCrown = (
        'Jagged Crown',
        True,  # tradable
        283,  # sell value
        (PlayerClass.Wizard, PlayerClass.Cleric),
        Stats.from_sequence([0, 0, 0, 2, 1, 0, 2, 1]),
        EquipmentSlot.Head,
    )
    LeatherCap = (
        'Leather Cap',
        False,  # tradable
        1,  # sell value
        (PlayerClass.Cleric, PlayerClass.Warrior, PlayerClass.Wizard),
        Stats.from_sequence([0, 0, 0, 1, 0, 0, 0, 0]),
        EquipmentSlot.Head,
    )
    MageHat = (
        'Mage Hat',
        True,  # tradable
        93,  # sell value
        (PlayerClass.Wizard),
        Stats.from_sequence([0, 0, 0, 1, 0, 1, 2, 0]),
        EquipmentSlot.Head,
    )
class BodyEquipment(EquipmentItem, enum.Enum):

    @staticmethod
    @functools.cache
    def by_class(cls: PlayerClass) -> Tuple[BodyEquipment, ...]:
        return tuple(
            c for c in BodyEquipment
            if cls in c.value.classes
        )

    DimitrisCloak = (
        'Dimitri\'s Cloak',
        True,  # tradable
        12,  # sell value
        (PlayerClass.Wizard, PlayerClass.Cleric),
        Stats.from_sequence([0, 0, 0, 1, 0, 0, 1, 0]),
        EquipmentSlot.Body,
    )
    LeatherArmor = (
        'Leather Armor',
        True,  # tradable
        24,  # sell value
        (),
        Stats.from_sequence([0, 0, 0, 3, 0, 0, 0, 0]),
        EquipmentSlot.Body,
    )
    PaddedGarb = (
        'Padded Garb',
        True,  # tradable
        18,  # sell value
        (PlayerClass.Cleric),
        Stats.from_sequence([0, 0, 0, 2, 0, 0, 1, 0]),
        EquipmentSlot.Body,
    )
    PlainClothes = (
        'Plain Clothes',
        True,  # tradable
        1,  # sell value
        (PlayerClass.Cleric, PlayerClass.Warrior, PlayerClass.Wizard),
        Stats.from_sequence([0, 0, 0, 1, 0, 0, 0, 0]),
        EquipmentSlot.Body,
    )
    TatteredCloak = (
        'Tattered Cloak',
        True,  # tradable
        12,  # sell value
        (PlayerClass.Wizard, PlayerClass.Cleric),
        Stats.from_sequence([0, 0, 0, 1, 0, 0, 1, 0]),
        EquipmentSlot.Body,
    )


GearType = Tuple[
    Optional[HeadEquipment],
    Optional[BodyEquipment],
    Optional[MainHandEquipment],
    Optional[OffHandEquipment],
]

